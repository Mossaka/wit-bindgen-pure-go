// Generated by `wit-bindgen` 0.8.0. DO NOT EDIT!
#[allow(clippy::all)]
pub fn print(msg: &str,){
  
  #[allow(unused_imports)]
  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
  unsafe {
    let vec0 = msg;
    let ptr0 = vec0.as_ptr() as i32;
    let len0 = vec0.len() as i32;
    
    #[link(wasm_import_module = "$root")]
    extern "C" {
      #[cfg_attr(target_arch = "wasm32", link_name = "print")]
      #[cfg_attr(not(target_arch = "wasm32"), link_name = "$root_print")]
      fn wit_import(
      _: i32, _: i32, );
    }
    wit_import(ptr0, len0);
  }
}
pub trait Host {
  fn run();
}

#[doc(hidden)]
pub unsafe fn call_run<T: Host>() {
  
  #[allow(unused_imports)]
  use wit_bindgen::rt::{alloc, vec::Vec, string::String};
  
  // Before executing any other code, use this function to run all static
  // constructors, if they have not yet been run. This is a hack required
  // to work around wasi-libc ctors calling import functions to initialize
  // the environment.
  //
  // This functionality will be removed once rust 1.69.0 is stable, at which
  // point wasi-libc will no longer have this behavior.
  //
  // See
  // https://github.com/bytecodealliance/preview2-prototyping/issues/99
  // for more details.
  #[cfg(target_arch="wasm32")]
  wit_bindgen::rt::run_ctors_once();
  
  T::run();
}

/// Declares the export of the component's world for the
/// given type.

macro_rules! export_host(($t:ident) => {
  const _: () = {
    
    const _: () = {
      #[doc(hidden)]
      #[export_name = "run"]
      #[allow(non_snake_case)]
      unsafe extern "C" fn __export_run() {
        call_run::<$t>()
      }
      
    };
    
  };
  
  #[used]
  #[doc(hidden)]
  #[cfg(target_arch = "wasm32")]
  static __FORCE_SECTION_REF: fn() = __link_section;
});

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:host"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 173] = [3, 0, 4, 104, 111, 115, 116, 0, 97, 115, 109, 13, 0, 1, 0, 7, 61, 1, 65, 2, 1, 65, 4, 1, 64, 1, 3, 109, 115, 103, 115, 1, 0, 3, 0, 5, 112, 114, 105, 110, 116, 1, 0, 1, 64, 0, 1, 0, 4, 0, 3, 114, 117, 110, 1, 1, 4, 1, 17, 101, 120, 97, 109, 112, 108, 101, 58, 104, 111, 115, 116, 47, 104, 111, 115, 116, 4, 0, 0, 69, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 49, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 5, 48, 46, 56, 46, 48, 11, 22, 1, 1, 16, 101, 120, 97, 109, 112, 108, 101, 58, 104, 111, 115, 116, 47, 119, 105, 116, 3, 0, 0];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
